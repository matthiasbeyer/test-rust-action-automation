name: CI

on:
  push:
    branches: [master, staging, trying, release-*]
  pull_request:
    branches: [master, release-*]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - 1.60.0

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - uses: swatinem/rust-cache@v1
      - name: cargo-check
        uses: actions-rs/cargo@v1
        with:
          command: check


  flake-check:
    name: flake-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: cachix/install-nix-action@v17
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - uses: cachix/cachix-action@v10
        with:
          name: test-rust-action-automation
          # If you chose API tokens for write access OR if you have a private cache
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - run: nix --extra-experimental-features "nix-command flakes" flake check


  # We need some "accummulation" job here because bors fails (timeouts) to
  # listen on matrix builds.
  # Hence, we have some kind of dummy here that bors can listen on
  ci-success:
    name: CI
    if: ${{ success() }}
    needs:
      - check
      - flake-check
    runs-on: ubuntu-latest
    steps:
      - name: CI succeeded
        run: exit 0
